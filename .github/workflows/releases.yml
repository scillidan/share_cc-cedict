name: Create Releases

on:
  schedule:
    - cron: '0 0 1 * *'  # 00:00 on the 1st of every month (UTC)
  workflow_dispatch: # allow manual trigger

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zip unzip

    - name: Install Python packages
      run: |
        pip install pyglossary lxml beautifulsoup4 python-idzip tqdm

    - name: Fetch latest release date and format it
      id: get_latest_release
      run: |
        curl -s 'https://www.mdbg.net/chinese/dictionary?page=cedict' -o page.html
        RELEASE_FULL=$(grep -oP '(?<=Latest release: <strong>).*?(?= GMT</strong>)' page.html | head -n 1)
        if [ -z "$RELEASE_FULL" ]; then
          echo "Failed to extract the latest release date"
          exit 1
        fi
        RELEASE_DATE=$(echo "$RELEASE_FULL" | cut -d' ' -f1 | tr -d '-')
        echo "release_date=$RELEASE_DATE" >> $GITHUB_OUTPUT
        echo "Latest release date detected: $RELEASE_DATE"

    - name: Check last stored release date
      id: check_last_release
      run: |
        if [ -f Release.txt ]; then
          LAST_RELEASE=$(cat Release.txt)
        else
          LAST_RELEASE=""
        fi
        echo "last_release=$LAST_RELEASE" >> $GITHUB_OUTPUT
        echo "Last stored release date: $LAST_RELEASE"

    - name: Exit if no new release
      if: steps.get_latest_release.outputs.release_date == steps.check_last_release.outputs.last_release
      run: |
        echo "No new release date found. Exiting."
        exit 0

    - name: Download CC-CEDICT ZIP file
      run: |
        curl -LO https://www.mdbg.net/chinese/export/cedict/cedict_1_0_ts_utf-8_mdbg.zip
        unzip cedict_1_0_ts_utf-8_mdbg.zip -d .

    - name: Run pyglossary and related processing
      env:
        RELEASE_DATE: ${{ steps.get_latest_release.outputs.release_date }}
      run: |
        pyglossary ./cedict_ts.u8 ./cc-cedict-${RELEASE_DATE}-tabfile.txt --read-format=EDICT2 --read-options="colorize_tones=false" --write-format=Tabfile --name=CC-CEDICT  2>&1 | tee log_u8_to_tabfile.txt
        python text_format.py cc-cedict-${RELEASE_DATE}-tabfile.txt cc-cedict-${RELEASE_DATE}-tabfile-formatted.txt
        pyglossary ./cc-cedict-${RELEASE_DATE}-tabfile-formatted.txt ./cc-cedict-${RELEASE_DATE}-stardict-mergesyns-html --read-format=Tabfile --write-format=StardictMergeSyns --name=CC-CEDICT
        python html2ansi.py cc-cedict-${RELEASE_DATE}-tabfile-formatted.txt cc-cedict-${RELEASE_DATE}-tabfile-formatted-html2ansi.txt
        pyglossary ./cc-cedict-${RELEASE_DATE}-tabfile-formatted-html2ansi.txt ./cc-cedict-${RELEASE_DATE}-stardict-mergesyns-html2ansi --read-format=Tabfile --write-format=StardictMergeSyns --name=CC-CEDICT

    - name: Debug list generated files
      env:
        RELEASE_DATE: ${{ steps.get_latest_release.outputs.release_date }}
      run: |
        echo "All generated files:"
        ls -l
        echo "Files for html prefix:"
        ls -l cc-cedict-${RELEASE_DATE}-stardict-mergesyns-html*
        echo "Files for html2ansi prefix:"
        ls -l cc-cedict-${RELEASE_DATE}-stardict-mergesyns-html2ansi*

    - name: Create zip files for Stardict sets
      env:
        RELEASE_DATE: ${{ steps.get_latest_release.outputs.release_date }}
      run: |
        for prefix in cc-cedict-${RELEASE_DATE}-stardict-mergesyns-html cc-cedict-${RELEASE_DATE}-stardict-mergesyns-html2ansi; do
          echo "Processing $prefix"
          if [[ -f "$prefix.ifo" && -f "$prefix.dict.dz" && -f "$prefix.idx" ]]; then
            echo "Creating ${prefix}.zip from $prefix.ifo, $prefix.dict.dz, $prefix.idx"
            zip -j "${prefix}.zip" "$prefix.ifo" "$prefix.dict.dz" "$prefix.idx"
          else
            echo "Skipping $prefix, missing required files."
            echo "Existing files:"
            ls -l ${prefix}.* || echo "No files found for $prefix"
          fi
        done

    - name: Create a txt file with current commit SHA
      run: echo "${{ github.sha }}" > Release.txt

    - name: Create GitHub Release and upload files
      uses: softprops/action-gh-release@v2
      if: github.ref_type == 'tag' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: ${{ steps.get_latest_release.outputs.release_date }}
        name: "${{ steps.get_latest_release.outputs.release_date }}"
        files: |
          cc-cedict-*.zip
          log_u8_to_tabfile.txt
          Release.txt
